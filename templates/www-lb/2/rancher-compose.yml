version: '2'
catalog:
  name: "EEA - Load Balancer"
  description: "HTTP/HTTPS Rancher Load Balancer"
  version: "3.0"
  questions:
  - variable: "HOST_LABELS"
    label: "Schedule services on hosts with the following host labels"
    description: "Comma separated list of host labels (e.g. key1=value1, key2=value2) to be used for scheduling service"
    default: "front=yes"
    type: "string"
    required: true
  - variable: "HTTPS_CERT"
    label: "HTTPS certificate"
    description: "SSL certificate"
    type: "certificate"
    required: true
  - variable: "HTTPS_SERVICE"
    label: "HTTPS service"
    description: "Service to handle HTTPS requests"
    type: "string"
    required: true
    default: "apache=true"
  - variable: "HTTPS_PORT"
    label: "Service port configured to handle HTTPS requests"
    description: "HTTPS port"
    default: 8443
    type: "int"
    required: true
  - variable: "HTTP_SERVICE"
    label: "HTTP service"
    description: "Service to handle HTTP requests"
    type: "string"
    required: true
    default: "apache=true"
  - variable: "HTTP_PORT"
    label: "Service port configured to handle HTTP requests"
    description: "HTTP port"
    default: 80
    type: "int"
    required: true
  - variable: "VARNISH_SERVICE"
    label: "Varnish dashboard service"
    description: "Service to handle varnish dashboard requests"
    default: "varnish=true"
  - variable: "VARNISH_PORT"
    label: "Varnish dashboard port"
    description: "Varnish dashboard port"
    default: 6085
    type: "int"
  - variable: "COUNTRIES_AND_REGIONS_IP"
    label: "Countries and regions IP"
    description: "Countries and regions IP"
    type: "string"
    default: "10.50.4.46"
  - variable: "COUNTRIES_AND_REGIONS_PORT"
    label: "Countries and regions PORT"
    description: "Countries and regions port"
    type: "int"
    default: 65345
  - variable: "HAPROXY_CONFIG"
    label: "Custom haproxy.cfg"
    description: "Custom Rancher Load-Balancer config"
    default: |
      defaults
        timeout connect 10s
        timeout client 300s
        timeout server 300s

      frontend 443
        bind *:443 ssl crt /etc/haproxy/certs/current alpn h2,http/1.1
        http-response set-header Strict-Transport-Security max-age=15768000;

      backend https

      backend http

      backend car
        acl end_slash path_end /
        http-request redirect code 301 location https://%[hdr(host)]%[url,regsub(/$$,,)] if end_slash
        reqrep ^([^\ :]*)\ /countries-and-regions/(.*)$$     \1\ /\2

      backend varnish
        reqrep ^([^\ :]*)\ /varnish-[a-z]/(.*)$     \1\ /\2
        reqrep ^([^\ :]*)\ /varnish/(.*)$     \1\ /html/\2

    type: "multiline"

services:
  countries:
    external_ips:
    - "${COUNTRIES_AND_REGIONS_IP}"
  proxy:
    lb_config:
      certs: []
      config: "${HAPROXY_CONFIG}"
      default_cert: ${HTTPS_CERT}
      port_rules:
      - backend_name: varnish
        path: /varnish/
        priority: 1
        protocol: https
        selector: ${VARNISH_SERVICE}
        source_port: 443
        target_port: ${VARNISH_PORT}
      - backend_name: car
        path: /countries-and-regions/tools/
        priority: 2
        protocol: https
        service: countries
        source_port: 443
        target_port: ${COUNTRIES_AND_REGIONS_PORT}
      - backend_name: car
        path: /countries-and-regions/esbootstrap_resources/
        priority: 3
        protocol: https
        service: countries
        source_port: 443
        target_port: ${COUNTRIES_AND_REGIONS_PORT}
      - backend_name: car
        path: /countries-and-regions/app_resources/
        priority: 4
        protocol: https
        service: countries
        source_port: 443
        target_port: ${COUNTRIES_AND_REGIONS_PORT}
      - backend_name: https
        priority: 5
        protocol: https
        selector: "${HTTPS_SERVICE}"
        source_port: 443
        target_port: ${HTTPS_PORT}
      - backend_name: http
        priority: 6
        protocol: http
        selector: "${HTTP_SERVICE}"
        source_port: 80
        target_port: ${HTTP_PORT}
    health_check:
      healthy_threshold: 2
      response_timeout: 2000
      port: 42
      unhealthy_threshold: 3
      initializing_timeout: 60000
      interval: 2000
      strategy: recreate
      reinitializing_timeout: 60000
